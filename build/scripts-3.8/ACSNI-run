#!python

"""
Name: ACSNI
Version: 0.1.11
Author: Chinedu A. Anene, Phd

# Usage:
python3 ACSNI -h
python3 ACSNI -i expression.csv -t geneSet.csv
"""

##############################################################################
import argparse
from pandas import read_csv
import sys
import os
from numpy.random import seed
from tensorflow.random import set_seed
from ACSNI import dat, corep, sim

##############################################################################
parser = argparse.ArgumentParser(description="System biology information extraction for genomics.")
parser.add_argument('-m', '--mad', default = 2, required=False,
                    help="Minimum median absolute deviance for geneSets")
parser.add_argument('-b', '--boot', default = 5, required=False,
                    help="Number of ensemble models to run")
parser.add_argument('-c', '--alpha', default=0.01, required=False,type=float,
                    help="Alpha threshold to make prediction calls")
parser.add_argument('-p', '--lp', default = 15, required=False,
                    help="Percentage of gene set for model layers")
parser.add_argument('-f', '--full', default=1, required=False,
                    help="Run tool in 1=full 0=sub (error only) mode")
parser.add_argument('-i', '--input', type=str, required=True,
                    help="Input expression data (.csv)")
parser.add_argument('-t', '--prior', type=str, required=True,
                    help='Prior matrix, binary')
parser.add_argument('-w', '--weight', default="pass", required=False,
                    help='Use weights for the genes', type=str)
parser.add_argument('-s', '--seed', default=68, required=False,
                    help= 'Set seed for reproducibility')
args = parser.parse_args()

##############################################################################
if float(args.mad) <= 1:
    sys.exit("This tool requires informative variation to work"
             ", please increase -m. Ideally, -m should be above 3")
else:
    mad_f = float(args.mad)
bb = int(args.boot)
lp = int(args.lp)
fu = int(args.full)
inp = args.input
pr = args.prior
tf = args.weight
sd = int(args.seed)
alpha_cut = args.alpha

# Argument store
run_info = {
    "m": mad_f, "b": bb, "c": alpha_cut,
    "p": lp, "f": fu, "i": inp, "t": pr,
    "w": tf, "s": sd }

##############################################################################
expression_matrix = read_csv(inp)
corep.check_name(expression_matrix)
corep.check_duplicates(expression_matrix)

##############################################################################
if tf == "pass":
    w1 = None
else:
    w1 = read_csv(tf)

prior_matrix = dat.gene_sets(read_csv(pr))
re = list()

##############################################################################
for z in prior_matrix:
    print("Running for {}".format(z))
    pa_re = inp[:-4] + z + "-" + dat.name_generator(7)

    if not os.path.isdir(pa_re):
        os.mkdir(pa_re)
        print("Results will be saved to {}".format(pa_re))
        os.chdir(os.path.join(os.getcwd(), pa_re))
    else:
        os.chdir(os.path.join(os.getcwd(), pa_re))

    if fu == 1:
        for i in range(bb):
            print("Run {}".format(i))
            sd_boot = sd * i
            print("Using {} seed".format(sd_boot))
            seed(sd_boot)
            set_seed(sd_boot)
            corep.run_full(prior_m=prior_matrix[z], gi=z, expression_m=expression_matrix,
                           w=w1, f=fu, mad=mad_f, nn=inp, p=lp, s=i, a=alpha_cut)
        Co, W, N, P, D = sim.merge_multi(os.getcwd())
        sim.save_merged_w_n_p_d(co=Co, w=W, n=N, p=P, d=D, nn=inp,
                                path=os.getcwd(), run_info=run_info)

    elif fu == 0:
        print("WARNING: -F 0 mode only runs one model. Use -f 1 for ensemble")
        print("Using {} seed".format(sd))
        seed(sd)
        set_seed(sd)
        results = corep.run_minimal(prior_m=prior_matrix[z], gi=z, expression_m=expression_matrix,
                                    w=w1, mad=mad_f, f=fu, p=lp, s=sd, a=alpha_cut)
        re.append(results)

    else:
        sys.exit("Invalid value set for parameter -f")

if fu == 0:
    corep.merge_minimal_out(re, inp[:-4] + pr[:-4])

##############################################################################
print("Creating null model")
sim_mat = sim.shuffle_exp(expression_matrix)
sim_mat.to_csv("NULL_{}".format(inp), index=True)
